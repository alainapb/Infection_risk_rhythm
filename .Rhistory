# hurd_nb_null <- hurdle(spore_counts ~ 1 | Age + Time_treatment,
#        dist = "negbin", link = "logit", data = reg_data)
# hurd_nb_time <- hurdle(spore_counts ~ Time_treatment | Age + Time_treatment,
#        dist = "negbin", link = "logit", data = reg_data)
# hurd_nb_age_time <- hurdle(spore_counts ~ Age + Time_treatment | Age + Time_treatment,
#        dist = "negbin", link = "logit", data = reg_data)
# hurd_nb_age_time_int <- hurdle(spore_counts ~ Age * Time_treatment | Age + Time_treatment,
#        dist = "negbin", link = "logit", data = reg_data)
# # poisson
# hurd_poi_null <- hurdle(spore_counts ~ 1 | Age + Time_treatment,
#        dist = "poisson", link = "logit", data = reg_data)
# hurd_poi_time <- hurdle(spore_counts ~ Time_treatment | Age + Time_treatment,
#        dist = "poisson", link = "logit", data = reg_data)
# hurd_poi_age_time <- hurdle(spore_counts ~ Age + Time_treatment | Age + Time_treatment,
#        dist = "poisson", link = "logit", data = reg_data)
# hurd_poi_age_time_int <- hurdle(spore_counts ~ Age * Time_treatment | Age + Time_treatment,
#        dist = "poisson", link = "logit", data = reg_data)
bbmle::AICtab(zi_nb_null,
zi_nb_time,
zi_nb_age_time,
zi_nb_age_time_int,
zi_poi_null,
zi_poi_time,
zi_poi_age_time,
zi_poi_age_time_int,
# hurd_nb_null,
# hurd_nb_time,
# hurd_nb_age_time,
# hurd_nb_age_time_int,
# hurd_poi_null,
# hurd_poi_time,
# hurd_poi_age_time,
# hurd_poi_age_time_int
logLik = TRUE, base = TRUE) %>%
data.frame() %>%
dplyr::select(-dLogLik) %>%
# write.csv("aic_spore_count.csv")
knitr::kable(digits = 2)
# using function from lmtest
lrtest(zi_nb_null, zi_nb_time)
lrtest(zi_nb_time, zi_nb_age_time)
lrtest(zi_nb_age_time, zi_nb_age_time_int)
# is this correct?
# output agrees with previous code chunk
car::Anova(zi_nb_age_time_int, test = "Chisq")
library(emmeans)
predict(zi_nb_time, newdata = expand.grid(Time_treatment = c("Day", "Night"), Age = 6:9), type = "response")
predict(zi_nb_time, newdata = expand.grid(Time_treatment = c("Day", "Night"), Age = 6:9), type = "count")
predict(zi_nb_time, newdata = expand.grid(Time_treatment = c("Day", "Night"), Age = 6:9), type = "zero")
# zi_nb_time
emm_response <- emmeans(zi_nb_time, "Time_treatment", mode = "response") # arithmatic mean
emm_response_lin <- emmeans(zi_nb_time, "Time_treatment", mode = "response", lin.pred = T) # geometric mean
emm_count <- emmeans(zi_nb_time, "Time_treatment", mode = "count")
# emmeans(zi_nb_time, "Time_treatment", mode = "prob0")
# zi_nb_age_time
emm_response_age_time <- emmeans(zi_nb_age_time, specs = "Time_treatment", by = "Age", mode = "response") # arithmatic mean
emm_count_age_time <- emmeans(zi_nb_age_time, specs = "Time_treatment", by = "Age", mode = "count")
# get CI for plotting response
model_mat <- model.matrix(zi_nb_age_time) %>% unique()
rownames(model_mat) <- c("age6_day", "age6_night",
"age7_day", "age7_night",
"age8_day", "age8_night",
"age9_day", "age9_night")
model_mat
contr_list <- lapply(1:nrow(model_mat), function(x) model_mat[x,])
names(contr_list) <- rownames(model_mat)
contrast(emm_response_age_time, spec = "pairwise", by = "Age")
emmip(emm_response_age_time, ~ Age | Time_treatment, CIs = TRUE) +
geom_point(aes(x = Age, y = spore_counts), data = reg_data, pch = 2, color = "blue")
# mod.mat <- model.matrix(zi_nb_time) %>% unique()
# row.names(mod.mat) <- c("day", "night")
#
# night_vs_day <- list("night vs day, age 6" = mod.mat["night",] - mod.mat["day",])
# response
# lf_response <- contrast(emm_response, night_vs_day)
# cont_response <- contrast(emm_response, "revpairwise")
# summary(lf_response)
# confint(lf_response)
#
summary(contrast(emm_response, "revpairwise"))
confint(contrast(emm_response, "revpairwise")) # night - day for response
# confint(contrast(emm_response_lin, "revpairwise")) # using linear.predictor scale doesn't change anything
# count
cont_count <- contrast(emm_count, "revpairwise") # night - day for count
summary(cont_count)
confint(cont_count)
nd_time <- zero_summary %>% dplyr::select(Age, Time_treatment)
emm_count_df <- emm_count %>% data.frame() %>% rename("count_time" = emmean, "count_lcl" = asymp.LCL, "count_ucl" = asymp.UCL)
emm_response_df <- emm_response %>% data.frame() %>% rename("response_time_emm" = emmean, "response_lcl" = asymp.LCL, "response_ucl" = asymp.UCL)
nd_time$count_time <- predict(zi_nb_time, newdata = nd_time, type = "count")
nd_time$response_time <- predict(zi_nb_time, newdata = nd_time, type = "response")
nd_time <- inner_join(nd_time, emm_count_df, by = c("Time_treatment", "count_time"))
nd_time <- inner_join(nd_time, emm_response_df, by = c("Time_treatment"))
# plot predicted and observed counts
ggplot() +
geom_ribbon(data = nd_time,
aes(x = Age, ymin = count_lcl, ymax = count_ucl, fill = Time_treatment),
alpha = 0.4) +
geom_jitter(data = zero_summary,
aes(x = Age, y = cond_mean_spore_counts, col = Time_treatment, size = n_infected),
alpha = 1, height = 0, width = 0.1) +
geom_jitter(data = filter(reg_data, infected == 1),
aes(x = Age, y = spore_counts, col = Time_treatment),
shape = 3, height = 0, width = 0.1) +
geom_line(data = nd_time,
aes(x = Age, y = count_time, col = Time_treatment, linetype = Time_treatment)) +
labs(y = "Spore counts when infected", x = "Age at exposure (days)",
col = "Exposure\ntime",
fill = "Exposure\ntime",
linetype = "Exposure\ntime",
size = "# infected") +
scale_color_manual(values=c("#ffcc33", "#0033cc"))+
scale_fill_manual(values=c("#ffcc33", "#0033cc"))+
theme_bw()
# plot predicted and observed response
# emm output with CI
ggplot() +
geom_ribbon(data = nd_time,
aes(x = Age, ymin = response_lcl, ymax = response_ucl, fill = Time_treatment),
alpha = 0.4) +
geom_jitter(data = zero_summary,
aes(x = Age, y = mean_spore_counts, col = Time_treatment, size = n_infected),
alpha = 1, height = 0, width = 0.1) +
geom_jitter(data = reg_data,
aes(x = Age, y = spore_counts, col = Time_treatment),
shape = 3, height = 0, width = 0.1) +
geom_line(data = nd_time,
aes(x = Age, y = response_time_emm, col = Time_treatment, linetype = Time_treatment)) +
labs(y = "Spore counts", x = "Age at exposure (days)",
col = "Exposure\ntime",
fill = "Exposure\ntime",
linetype = "Exposure\ntime",
size = "# infected") +
scale_color_manual(values=c("#ffcc33", "#0033cc"))+
scale_fill_manual(values=c("#ffcc33", "#0033cc"))+
theme_bw()
# predict output no CI
ggplot() +
geom_jitter(data = zero_summary,
aes(x = Age, y = mean_spore_counts, col = Time_treatment, size = n_infected),
alpha = 1, height = 0, width = 0.1) +
geom_jitter(data = reg_data,
aes(x = Age, y = spore_counts, col = Time_treatment),
shape = 3, height = 0, width = 0.1) +
geom_line(data = nd_time,
aes(x = Age, y = response_time, col = Time_treatment, linetype = Time_treatment)) +
geom_line(data = nd_time,
aes(x = Age, y = response_time_emm, linetype = Time_treatment)) +
labs(y = "Spore counts", x = "Age at exposure (days)",
col = "Exposure\ntime",
fill = "Exposure\ntime",
linetype = "Exposure\ntime",
size = "# infected") +
scale_color_manual(values=c("#ffcc33", "#0033cc"))+
scale_fill_manual(values=c("#ffcc33", "#0033cc"))+
theme_bw()
# here is how to specify level of continuous predictor
# spore_counts ~ time
emm_response_time <- emmeans(zi_nb_age_time, ~ Time_treatment | Age, at = list(Age = 6:9))
(emm_response_time_df <- emm_response_time %>% data.frame())
# spore_counts ~ age + time
emm_response_age_time <- emmeans(zi_nb_time, ~ Time_treatment | Age, at = list(Age = 6:9))
(emm_response_age_time_df <- emm_response_age_time %>% data.frame())
# contrast between day and night
contrast(emm_response_time, "pairwise")
p_count <-
ggplot() +
geom_ribbon(data = nd_time,
aes(x = Age, ymin = count_lcl, ymax = count_ucl, fill = Time_treatment),
alpha = 0.3) +
geom_jitter(data = zero_summary,
aes(x = Age, y = cond_mean_spore_counts, col = Time_treatment, size = n_infected),
alpha = 1, height = 0, width = 0.1) +
geom_jitter(data = filter(reg_data, infected == 1),
aes(x = Age, y = spore_counts, col = Time_treatment),
shape = 3, height = 0, width = 0.1) +
geom_line(data = nd_time,
aes(x = Age, y = count_time, col = Time_treatment, linetype = Time_treatment)) +
labs(y = "Spore counts when infected", x = "Age at exposure (days)",
col = "Exposure\ntime",
fill = "Exposure\ntime",
linetype = "Exposure\ntime",
size = "# infected") +
scale_color_manual(values=c("#ffcc33", "#0033cc"))+
scale_fill_manual(values=c("#ffcc33", "#0033cc"))+
theme_bw()
p_response <-
ggplot() +
geom_line(data = emm_response_time_df, aes(x = Age, y = emmean, col = Time_treatment, linetype = Time_treatment)) +
geom_ribbon(data = emm_response_time_df,
aes(x = Age, ymin = asymp.LCL, ymax = asymp.UCL, fill = Time_treatment), alpha = 0.3) +
geom_jitter(data = zero_summary,
aes(x = Age, y = mean_spore_counts, col = Time_treatment, size = n_infected),
alpha = 1, height = 0, width = 0.1) +
geom_jitter(data = reg_data,
aes(x = Age, y = spore_counts, col = Time_treatment),
shape = 3, height = 0, width = 0.1) +
labs(y = "Spore counts", x = "Age at exposure (days)",
col = "Exposure\ntime",
fill = "Exposure\ntime",
linetype = "Exposure\ntime",
size = "# infected") +
scale_color_manual(values=c("#ffcc33", "#0033cc"))+
scale_fill_manual(values=c("#ffcc33", "#0033cc"))+
theme_bw()
combined <- (p_count & theme(legend.position = "none")) + p_response
combined + plot_layout(guides = "collect") + plot_annotation(tag_levels = 'A')
# zi negbin null model conditional count predictions
nd <- zero_summary %>% dplyr::select(Age, Time_treatment)
#summary(zi_nb_null)
nd$count_null <- predict(zi_nb_null, newdata = nd, type = "count")
zi_nb_null_CI <- confint(zi_nb_null) %>% as_tibble()
nd$count_null_lwr <- zi_nb_null_CI[1,1] %>% pull() %>% exp()
nd$count_null_upr <- zi_nb_null_CI[1,2] %>% pull() %>% exp()
# plot the conditional observed count, mean count, and predicted count + CI
ggplot() +
geom_point(data = zero_summary,
aes(x = Age, y = cond_mean_spore_counts, col = Time_treatment, size = n_infected),
alpha = 0.5) +
geom_jitter(data = filter(reg_data, infected == 1),
aes(x = Age, y = spore_counts, col = Time_treatment),
shape = 3, height = 0, width = 0.1) +
geom_line(data = nd,
aes(x = Age, y = count_null)) +
geom_ribbon(data = nd,
aes(x = Age, ymin = count_null_lwr, ymax = count_null_upr),
alpha = 0.2) +
labs(y = "Spore Counts when Infected", x = "Age at Exposure (days)",
col = "Exposure\ntime",
size = "No. Infected") +
scale_color_manual(values=c("#ffcc33", "#0033cc"))+
scale_fill_manual(values=c("#ffcc33", "#0033cc"))+
theme_bw()
# zi negbin null model response prediction
nd$response_null <- predict(zi_nb_null, newdata = nd, type = "response")
# need to figure out how to compute CI for this
# plot mean spore count conditional on infection probability
ggplot() +
geom_point(data = zero_summary,
aes(x = Age, y = mean_spore_counts, col = Time_treatment, size = n_infected),
alpha = 0.5) +
geom_jitter(data = reg_data,
aes(x = Age, y = spore_counts, col = Time_treatment),
shape = 3, height = 0, width = 0.1) +
geom_line(data = nd,
aes(x = Age, y = response_null, col = Time_treatment)) +
labs(y = "Spore Counts", x = "Age at Exposure (days)",
col = "Exposure\ntime",
size = "No. Infected") +
scale_color_manual(values=c("#ffcc33", "#0033cc"))+
scale_fill_manual(values=c("#ffcc33", "#0033cc"))+
theme_bw()+
theme(axis.title.y = element_text(size = 12, color ="black"),
axis.title.x = element_text(size = 12, color ="black"),
axis.text = element_text(size = 8, color="black"),
legend.text = element_text(size=10, color = "black"))
zero_summary$response <- predict(zi_nb_time, newdata = zero_summary, type = "response")
zero_summary$count <- predict(zi_nb_time, newdata = zero_summary, type = "count")
zero_summary$prob_zero <- predict(zi_nb_time, newdata = zero_summary, type = "zero")
zero_summary %>% knitr::kable(digits = 2)
zero_summary %>%
group_by(Age) %>%
summarise("night - day" = response - lag(response)) %>%
ungroup() %>%
summarise("night - day" = mean(`night - day`, na.rm = T))
summary(contrast(emm_response, "revpairwise"))
confint(contrast(emm_response, "revpairwise")) # night - day for response
cont_count <- contrast(emm_count, "revpairwise") # night - day for count
summary(cont_count)
confint(cont_count)
cont_count <- contrast(emm_count, "revpairwise") # night - day for count
summary(cont_count)
confint(cont_count)
View(summary_data)
library(tidyverse)
library(patchwork)
knitr::opts_chunk$set(echo = TRUE)
feed_data<-read.csv("data/feeding_data_3.28.21.csv", header=T)
po<-read.csv("data/4_Day_PO.csv", header = T) #Corrected_Change is the Active PO per sample (~8 ind. per sample)
po_correct<- # sample number is arbitrary
read_csv("data/PO_biodare_sample_correction.csv") %>%
pivot_longer(cols = 2:5, names_sep = "_",
names_to = c(NA,"sample"), values_to = "PO")
growth<-read.csv("data/growth_data_3.28.21.csv", header=T)
life<-read.csv("data/life_data_3.28.21.csv", header =T)
#calculate the mean of the controls for each plate
summary_data <- feed_data %>%
group_by(Plate_Control) %>%
mutate(control_mean = mean(Control_Flour_Reading, na.rm = T)) %>%
select(Plate_Control, control_mean) %>%
distinct() %>% as.data.frame()
#remove extra row
summary_data  <- summary_data[!(summary_data$Plate_Control == ""),]
#match control mean with plate treatment
map = setNames(summary_data$control_mean,summary_data$Plate_Control)
feed_data$control_mean <- map[as.character(feed_data$Plate_Treatment)]
#volume, mL
v = 10
#time, hours
t = 9
##difference in feeding compared to control
k=feed_data$control_mean/feed_data$Flourometry_Reading
##calculate feeding rate (Sarnelle and Wilson)
feed_data$fr_sw <- log(k) * (v/t)
#calculate mean feeding rate per animal (keep rate > 0)
animal_mean <- feed_data %>%
#keep fr_sw values > 0
#filter(fr_sw > 0) %>% #this removes 64 animals...
#group based on these variables
group_by(Time_treatment, Age, Animal, Exposed.Control) %>%
#means based on groups above
summarise(fr_sw = mean(fr_sw, na.rm=TRUE))
#combine feeding rates with life history data
merge(animal_mean, life, by=c("Age", "Time_treatment", "Animal", "Exposed.Control"), keep=TRUE) %>%
mutate(id = paste(Age,
Time_treatment,
Animal,
Exposed.Control,
sep = "_")) %>%
as.data.frame()->all.data
#create id for growth data
growth %>%
mutate(id = paste(Age,
Time_treatment,
Animal,
Exposed.Control,
sep = "_")) %>%
as.data.frame()->growth
# join growth data to feeding rate and life history data
all.data <- inner_join(all.data, growth, by = c("Age", "Time_treatment", "Animal", "Exposed.Control", "id"))
all.data %>%
filter(Sex == "F")%>%
ggplot()+
geom_boxplot(aes(x=as.factor(Age), y=fr_sw, color=Time_treatment))+
scale_color_manual(values=c("goldenrod2", "darkblue"))+
facet_grid(.~Exposed.Control)+
theme_bw()
all.data %>%
filter(Sex == "F")%>%
ggplot()+
geom_jitter(aes(x=Time_treatment, y=fr_sw, color=Exposed.Control))+
scale_color_manual(values=c("black", "limegreen"))+
facet_grid(.~Age)+
theme_bw()
growth %>%
filter(days_post_exposure == 0) %>%
ggplot()+
geom_boxplot(mapping=aes(x=as.factor(Age), y=Length_at_exposure_mm))
all.data %>%
group_by(Age) %>%
summarise(length = mean(Length_at_exposure_mm, na.rm=TRUE))-> average_size
average_size$size<-(average_size$length)^3
no_size<-po_correct %>%
ggplot() +
geom_point(aes(x = time, y = PO, group = sample)) +
geom_smooth(aes(x = time, y = PO), method = "lm", color ="orange", alpha = 0) +
labs(y="Active PO", x="Age (days)")+
scale_x_continuous(breaks = c(24,48,72,96), labels = c(6,7, 8,9))+
theme_bw()+
theme(axis.text.x = element_text(size=8, color="black"),
axis.text.y = element_text(size=8, color="black"),
axis.title = element_text(size = 12, color="black"))
ggsave("figure2.pdf", height =4, width =6)
##Size corrected plots
a<-as.vector(po_correct %>%
filter(time < 27) %>%
summarise(size_cor = PO/2.425660))
b<-as.vector(po_correct %>%
filter(time > 24, time <51) %>%
summarise(size_cor = PO/2.564842))
c<-as.vector(po_correct %>%
filter(time > 48, time < 75) %>%
summarise(size_cor = PO/2.761120))
d<-as.vector(po_correct %>%
filter(time > 72) %>%
summarise(size_cor = PO/3.097012))
size_cor<-unlist(c(a,b,c,d))
unname(size_cor)
po_correct$size_cor<-unlist(unname(size_cor))
with_size<-po_correct %>%
ggplot() +
geom_point(aes(x = time, y = size_cor, group = sample)) +
geom_smooth(aes(x = time, y = size_cor), method = "lm", color ="orange", alpha = 0) +
labs(y="Active PO", x="Age (days)")+
scale_x_continuous(breaks = c(24,48,72,96), labels = c(6,7, 8,9))+
theme_bw()+
theme(axis.text.x = element_text(size=8, color="black"),
axis.text.y = element_text(size=8, color="black"),
axis.title = element_text(size = 12, color="black"))
no_size + with_size
#### slope
summary(lm(size_cor ~ time, po_correct))
summary(lm(PO ~ time, po_correct))
growth %>%
filter(Age == 6) %>%
ggplot(aes(x=days_post_exposure, y=Length_at_exposure_mm, color=as.factor(Animal)))+
geom_point()+
geom_line()+
facet_grid(Time_treatment~.)
growth %>%
filter(Age == 7) %>%
ggplot(aes(x=days_post_exposure, y=Length_at_exposure_mm, color=as.factor(Animal)))+
geom_point()+
geom_line()+
facet_grid(Time_treatment~.)
growth %>%
filter(Age == 8) %>%
ggplot(aes(x=days_post_exposure, y=Length_at_exposure_mm, color=as.factor(Animal)))+
geom_point()+
geom_line()+
facet_grid(Time_treatment~.)
growth %>%
filter(Age == 9) %>%
ggplot(aes(x=days_post_exposure, y=Length_at_exposure_mm, color=as.factor(Animal)))+
geom_point()+
geom_line()+
facet_grid(Time_treatment~.)
# infection prevalence
all.data %>%
filter(Time_treatment == "Exposed" | Sex == "F") %>%
ggplot(aes(x=Age, y=infected, color=Time_treatment))+
scale_color_manual(values=c("goldenrod2", "darkblue"))+
geom_jitter(width = .1, height = .1)+
geom_smooth(method="lm")+
scale_y_continuous(limits=c(-.1,1))+
scale_x_continuous(breaks=c(6,7,8,9))+
theme_bw()
#infection intensity
life %>%
filter(Time_treatment == "Exposed"| Sex == "F") %>%
ggplot(aes(x=Age, y=spore_counts, color=Time_treatment))+
scale_color_manual(values=c("goldenrod2", "darkblue"))+
#geom_jitter(width=.25)+
geom_point()+
geom_smooth(method="lm")+
theme_bw()
#total offspring
all.data %>%
filter(Sex == "F") %>%
#filter(infected != "NA") %>%     #removes controls
ggplot(aes(x=Time_treatment, y=total_offspring, fill=as.factor(infected)))+
geom_boxplot()+
facet_grid(~Age)
#age at first clutch
all.data %>%
filter(Sex == "F") %>%
#filter(infected != "NA") %>%     #removes controls
ggplot(aes(x=Time_treatment, y=age_at_first_clutch, fill=as.factor(infected)))+
geom_boxplot()+
facet_grid(~Age)
#Does PO differ across a day (Resting = Light hours, Active = dark hours) and across ages?
summary(po_model<-glm(Corrected_Change ~ Phase*as.factor(Age), data=po))
plot(po_model)
summary(lm(log(Corrected_Change) ~ Age, data = po))
summary(lm(log(Corrected_Change) ~ as.factor(Age)-1, data = po))
newdata<-expand.grid(Phase=c("Active", "Resting"), Age = 6:9)
newdata$preds<-predict(po_model, newdata=newdata)
newdata %>%
ggplot()+
geom_line(aes(x=Age, y=preds, color=Phase))+
geom_point(po, mapping=aes(x=Age, y=Corrected_Change, color=Phase), alpha = 0.5)
hist(po$Corrected_Change)
# po is strictly? positive
# no zeros
po_summary <- po %>%
group_by(Age) %>%
mutate(age_mean_po = mean(Corrected_Change, na.rm = TRUE)) %>%
group_by(Time_treatment, Age) %>%
summarise(mean_po = mean(Corrected_Change, na.rm = TRUE),
min_po = min(Corrected_Change, na.rm = TRUE),
max_po = max(Corrected_Change, na.rm = TRUE),
age_mean_po = unique(age_mean_po))
po_summary
# linear model using log(Corrected_Change) as response
fit.log.po <- lm(log(Corrected_Change) ~ Age * Time_treatment, data = po)
summary(fit.log.po)
plot(fit.log.po)
# plot predictions
nd <- expand.grid(Time_treatment=c("Dark", "Light"), Age = seq(6, 9, length.out = 100))
po_pred <- predict(fit.log.po, newdata = nd, interval = "confidence") %>%
as_tibble() %>%
mutate(fit_median = exp(fit),
lwr_median = exp(lwr),
upr_median = exp(upr)) %>%
cbind(nd)
po_pred %>%
ggplot() +
geom_line(aes(x = Age, y = fit_median, col = Time_treatment)) +
geom_ribbon(aes(x = Age, ymin = lwr_median, ymax = upr_median, fill = Time_treatment), alpha = 0.3) +
geom_point(data = po_summary, mapping = aes(x = Age, y = mean_po, col = Time_treatment)) +
geom_point(data = po_summary, mapping = aes(x = Age, y = age_mean_po))
#geom_jitter(data = po, mapping = aes(x = Age, y = Corrected_Change, col = Time_treatment), width = 0.1, height = 0)
glm(Corrected_Change ~ Age * Time_treatment, family = gaussian(link = "log"), data = po)
prev <- all.data %>%
filter(Exposed.Control == "Exposed",
days_post_exposure == 0) %>%
group_by(Age, Time_treatment) %>%
summarise(inf = sum(infected, na.rm=T),
n = n(),
prev = inf/n)
prev %>% knitr::kable()
prev %>% ggplot() +
geom_point(aes(x = Age, y = prev, col = Time_treatment)) +
geom_line(aes(x = Age, y = prev, col = Time_treatment)) +
ylim(0,1)
all.data %>%
group_by(Age, Time_treatment, Exposed.Control, infected) %>%
summarise(feed = mean(fr_sw))
avg_feed <- all.data %>%
group_by(Age, Time_treatment, Exposed.Control, infected) %>%
summarise(feed = mean(fr_sw))
View(avg_feed)
